---
import { SITE_NAME, SITE_DESCRIPTION, INTERSECTION, INTERSECTION_DESCRIPTION } from '@/consts';
import { ClientRouter } from 'astro:transitions';
import siteUrl from '@/helpers/siteUrl';
import { Font } from 'astro:assets';

const { pathname } = Astro.url;

const { title, description, dateModified, datePublished } = Astro.props;

const schema = () => {
  const website = {
    '@type': 'Website',
    name: 'Life on Cats?',
    url: import.meta.env.SITE_URL,
  };

  return JSON.stringify({
    '@context': 'https://schema.org/',
    '@graph': [website],
  });
};
---

<head>
  <meta charset="utf-8" />
  <title>{title ?? SITE_NAME}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={siteUrl(pathname)} />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" href="/favicon.ico" sizes="32x32" />
  <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
  <link rel="apple-touch-icon" href={siteUrl('/favicons/apple-touch-icon.png')} />
  <link rel="manifest" href={siteUrl('/favicons/site.webmanifest')} />
  <meta property="og:type" content="website" />
  <meta property="og:site_name" content={SITE_NAME} />
  <meta property="og:url" content={siteUrl(pathname)} />
  <meta property="og:title" content={title ?? SITE_NAME} />
  <meta property="og:description" content={description ?? SITE_DESCRIPTION} />
  <!-- {
    (!isArticle || hasArticleCover) && (
      <>
        <meta
          property="og:image"
          content={
            isArticle
              ? siteUrl(`/assets/${blogPost}/og.jpg`)
              : siteUrl("/assets/og.jpg")
          }
        />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="800" />
        <meta property="og:image:alt" content={SITE_DESCRIPTION} />
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:image" content={siteUrl("/assets/og.jpg")} />
        <meta property="twitter:image:alt" content={SITE_DESCRIPTION} />
      </>
    )
  } -->
  <meta property="twitter:url" content={siteUrl(pathname)} />
  <meta property="twitter:title" content={title ?? SITE_NAME} />
  <meta property="twitter:description" content={description ?? SITE_DESCRIPTION} />
  <meta property="fb:app_id" content="1241704385975640" />
  <script type="application/ld+json" set:html={schema()} is:inline />
  <meta name="format-detection" content="telephone=no" />
  {
    import.meta.env.PROD && (
      <script
        async
        data-logspot-pk={import.meta.env.LOGSPOT_PUBLIC_KEY}
        src="https://cdn.logspot.io/lg.js"
        is:inline
        data-astro-rerun
      />
    )
  }
  <Font cssVariable="--font-asap" preload />
  <ClientRouter />
</head>
